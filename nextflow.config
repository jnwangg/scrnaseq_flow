/*
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Nextflow Configuration File
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Defines all general parameters and configuration options. Includes
//  container profiles, environment variables, pipeline metadata, and
//  access to nf-core's institutional profiles.
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Global default parameters.
params {
    // Generic parameters.
    input            = null
    outdir           = null
    genome           = null
    gtf              = null
    protocol         = '10XV3'
    save_ref         = false

    // Trimming parameters.
    cutadapt_args    = null

    // Alignment parameters.
    kb_args          = null

    // Boilerplate parameters.
    publish_dir_mode = 'copy'

    // Maximum resource parameters.
    // Not referenced except when using nf-core institutional profiles.
    max_memory       = '128.GB'
    max_cpus         = 16
    max_time         = '240.h'
}

// Load default resource configurations for modules.
includeConfig 'config/resource.config'

// Container profiles.
profiles {
    singularity {
        singularity.enabled = true
        docker.enabled      = false
        conda.enabled       = false
    }
    docker {
        singularity.enabled = false
        docker.enabled      = true
        conda.enabled       = false
    }
    conda {
        singularity.enabled = false
        docker.enabled      = false
        conda.enabled       = true
    }
    hpc {
        singularity.enabled = true
        docker.enabled      = false
        conda.enabled       = false
        process.executor    = 'slurm'
    }
}

// Default Singularity and Docker registries.
docker.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Prevent local Python/R libraries from conflicting with containers.
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Pipeline metadata.
manifest {
    name            = 'scrnaseq_flow'
    author          = """Wang J."""
    homePage        = 'https://github.com/jnwangg/scrnaseq_flow'
    description     = """A Nextflow pipeline for scRNA-seq data, with kallisto-bustools."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
}

// Load module-specific options.
includeConfig 'config/modules.config'

// Enable use of nf-core's institutional profiles.
try {
    includeConfig "https://raw.githubusercontent.com/nf-core/configs/master/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: https://raw.githubusercontent.com/nf-core/configs/master/nfcore_custom.config")
}

/*
// Ensure resource requirements do not exceed max_cpus, max_memory, and max_time.
// Function taken from the nf-core framework.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The nf-core framework for community-curated bioinformatics pipelines.
//
// Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg,
// Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen.
//
// Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
